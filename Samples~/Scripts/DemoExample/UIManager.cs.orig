using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class UIManager : MonoBehaviour
{
	[Header("References:")]
	[SerializeField] private GameObject loginPanel;
	[SerializeField] private GameObject welcomePanel;
	[SerializeField] private TMPro.TextMeshProUGUI welcomeText;
	[SerializeField] private TabButton inventoryButton;
	[SerializeField] private TabButton marketButton;
	[SerializeField] private InventoryManager inventory;
	[SerializeField] private MarketManager market;
	[SerializeField] private GameObject loadingPanel;
	[SerializeField] private TMPro.TextMeshProUGUI accountText;
	[SerializeField] private TMPro.TextMeshProUGUI balanceText;
	[SerializeField] private TMPro.TextMeshProUGUI softBalanceText;
	[Header("Settings:")]
	[SerializeField, Range(0.1f,10)] private float _walletUpdateTime = 3;

	private DateTime _lastCheck;

	private void Start()
	{
		AllowUIAccess(false);
		inventoryButton.OnTabSelected.AddListener(AccessInventory);
		marketButton.OnTabSelected.AddListener(AccessMarket);
		
		inventory.onInventoryRefresh.AddListener(AccessInventory);
		inventory.onItemMint.AddListener(MintItem);

		_lastCheck = DateTime.Now;

		// Is this neccessary? "GetBeaconConnector()" accessor lazyly Inits beacon
		//DatabaseFactory.Instance.GetDatabase().Init();
	}

	private void Update()
	{
		if (DatabaseFactory.Instance.GetDatabase().GetCurrentUser() == null || 
			(DateTime.Now - _lastCheck).TotalSeconds < _walletUpdateTime ||
			Input.GetMouseButtonDown(0)||
			Input.touchCount > 0)
		{
			return;
		}

		//Every X number of seconds(ignoring while the player is currently dragging), update the displayed info and inventory
		InventoryWalletCheck();
		_lastCheck = DateTime.Now;
	}

	private void AccessInventory()
	{
		loadingPanel.SetActive(true);
		InventoryWalletCheck();
	}
	
	private void AccessMarket()
	{
		loadingPanel.SetActive(true);
		InventoryWalletCheck();
	}

	/// <summary>
	/// Updates the information being displayed for the paired wallet and inventory
	/// </summary>
	private void InventoryWalletCheck()
	{
		if (inventory.gameObject.activeSelf)
		{
			DatabaseFactory.Instance.GetDatabase().FetchInventoryItems(PopulateInventory);
		}
		if (market.gameObject.activeSelf)
		{
			DatabaseFactory.Instance.GetDatabase().FetchMarketItems(PopulateMarket);
		}

		// refresh wallet data 
		DisplayWalletData();
	}

<<<<<<< HEAD
    void SetBalanceText(float balance)
    {
        // balance is in mutez (one millionth of tezos)
        var floatBalance = (float)balance * 0.000001;
        Debug.Log("Balance: " + floatBalance + " || " + balance);
        balanceText.text = (floatBalance).ToString();
    }
    
    void SetSoftBalanceText(int balance)
    {
        // balance is in mutez (one millionth of tezos)
        softBalanceText.text = balance.ToString();
    }
=======
	private void MintItem()
	{
		var id = UnityEngine.Random.Range(0, 100000);
		DatabaseFactory.Instance.GetDatabase().MintItem(id, null);
	}
>>>>>>> airgap

	public void GetCoins()
	{
		DatabaseFactory.Instance.GetDatabase().Login();
	}

	public void OnSignIn(bool success)
	{
		AllowUIAccess(success);
		//TODO: GetActiveAccount() in the BeaconConnector SHOULD be returning stuff from the paired account.
		//Something in there might be usable to populate the User info I removed if we still want this.
		welcomeText.text = success? "Welcome!" : "Pairing failed or timed out";
		DisplayWalletData();
	}

	public void AllowUIAccess(bool allow)
	{
		loginPanel.SetActive(!allow);
		welcomePanel.SetActive(allow);
		inventoryButton.gameObject.SetActive(allow);
		marketButton.gameObject.SetActive(allow);
	}

	private void PopulateInventory(List<IItemModel> items)
	{
		Action action = () =>
		{
			inventory.Init(items);
			loadingPanel.SetActive(false);
		};
		StartCoroutine(DoActionNextFrame(action));
	}
	
	private void PopulateMarket(List<IItemModel> items)
	{
		Action action = () =>
		{
			market.Init(items);
			loadingPanel.SetActive(false);
		};
		StartCoroutine(DoActionNextFrame(action));
	}

	IEnumerator DoActionNextFrame(Action action)
	{
		yield return new WaitForEndOfFrame();
		action?.Invoke();
	}

	/// <summary>
	/// Resets the data in the UI to default values. For use in logout
	/// </summary>
	public void ResetWalletData()
	{
		SetAccountText("0");
		SetBalanceText(0);
		SetSoftBalanceText(0);
	}

	private void DisplayWalletData()
	{
		IDatabase db = DatabaseFactory.Instance.GetDatabase();
		string accountNum = db.GetCurrentUser().Address;
		SetAccountText(accountNum);
		db.GetBalance(SetBalanceText);
		db.GetSoftBalance(SetSoftBalanceText);
	}

	void SetBalanceText(int balance)
	{
		// balance is in mutez (one millionth of tezos)
		var floatBalance = (float)balance * 0.000001;
		balanceText.text = (floatBalance) .ToString();
	}
	
	void SetSoftBalanceText(int balance)
	{
		// balance is in mutez (one millionth of tezos)
		softBalanceText.text = balance.ToString();
	}

	void SetAccountText(string account)
	{
		accountText.text = account;
	}
}
