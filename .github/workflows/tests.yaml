name: Unity Package Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PACKAGE_NAME: com.trilitech.tezos-unity-sdk

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - TestProject
        testMode:
          - playmode

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Unity
        uses: game-ci/unity-setup@v2
        with:
          unity-version: '2021.3.22f1'

      - name: Create new Unity project
        run: |
          unity-editor -batchmode -createProject TestProject

      - name: Install jq
        run: |
          sudo apt-get install jq

      - name: Add UPM package dependency
        run: |
          cd TestProject
          jq '.dependencies += {"'"$PACKAGE_NAME"'": "file:../"} | .testables += ["'"$PACKAGE_NAME"'"]' Packages/manifest.json > temp.json && mv temp.json Packages/manifest.json

      - uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}
          restore-keys: |
            Library-
      - uses: game-ci/unity-test-runner@v2
        id: tests
#        env:
#          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.testMode }} Test Results
#          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}
